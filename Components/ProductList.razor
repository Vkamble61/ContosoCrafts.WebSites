<h3>ProductList</h3>
@using Microsoft.AspNetCore.Components.Web
@using ContosoCrafts.WebSites.Models
@using ContosoCrafts.WebSites.Services
@inject JsonFileProductService ProductService


<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


@*<div class="card-columns">*@
<div class="container">
    <div class="row row-cols-1 row-cols-md-4 g-3">
        @foreach (var product in ProductService.GetProducts())
        {
        
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image'); height:330px;">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.Description</h5>
                </div>           
                <div class="card-footer">
                    <small class="text-muted">
                        @*<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>*@
                        <button type="button"  @onclick="(e => SelectProduct(product.Id))" data-toggle="modal" data-target="#productModal"
                        class="btn btn-primary">More Info</button>
                    </small>
                </div>
            </div>
        }
    </div>
</div>


@if (selectedProduct != null)
{

   <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    { 
                        <span>Be the first to vote</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    @for(int i = 1;i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class=" fa-star fa checked" @onclick="(e=>SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class=" fa-star fa " @onclick="(e=>SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    Product selectedProduct = new();
    string selectedProductId ="";

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel = "";

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;


        }     
        Console.WriteLine($"Current Rating for {selectedProduct.Id} : {currentRating}");

    }
    void SubmitRating(int rating)
    {
        Console.WriteLine($" Rating received  for {selectedProduct.Id} : {rating}");
        ProductService.AddRatings(selectedProduct.Id, rating);
        SelectProduct(selectedProduct.Id);
    }

 }
